@using Microsoft.AspNet.Identity
@using XgagWebsite.Helpers
@model IEnumerable<XgagWebsite.Models.Post>

@foreach (var post in Model)
{
    var userVote = Request.IsAuthenticated ? post.Votes.FirstOrDefault(v => v.Voter.UserName == User.Identity.GetUserName()) : null;
    var hasUserVoted = userVote != null;

    <div class="row post-row">
        <h3 class="text-primary"><a href="/Posts/View/@(post.PostId)">@post.Title</a></h3>
        @if (post.Image != null)
        {
            <div class="post-content-wrapper">
                @if (post.IsNSFW)
                {
                    <div class="nsfw-overlay"
                         data-id="nsfw-@(post.PostId)">
                        <div>
                            <h1 class="glyphicon glyphicon-warning-sign"></h1>
                            <h1>NSFW</h1>
                            <h3>This post is marked as not safe for work</h3>
                            <h2>Click to view the post</h2>
                        </div>
                    </div>
                }

                <div class="loading-overlay"
                     id="loading-overlay-@(post.PostId)">
                    <div class="loading animated fadeIn">
                        <div class="bg"></div>
                    </div>
                </div>

                <a href="/Posts/View/@(post.PostId)">
                    <img src="@(string.Format("/Images/View/{0}", post.Image.ImageId))"
                         data-id="@(post.PostId)"
                         class="post-image" />
                </a>
            </div>
        }
        else
        {
            <text>@Html.Raw(post.YouTubeLink)</text>
        }
        <div>
            <span class="text-info text">Score: <span id="score-@(post.PostId)">@post.CalculateScore()</span></span>
        </div>
        <div>
            <button onclick="vote(@(post.PostId), 1)"
                    data-unvote="@(hasUserVoted)"
                    id="upvote-@(post.PostId)"
                    class="btn
                                    @(hasUserVoted && (int)userVote.Type > 0 ? "btn-success" : hasUserVoted ? "disabled btn-primary" : "btn-primary")
                                    @(!Request.IsAuthenticated ? "disabled" : "")">
                <span class="glyphicon glyphicon-arrow-up"></span>
            </button>
            <button onclick="vote(@(post.PostId), -1)"
                    data-unvote="@(hasUserVoted)"
                    id="downvote-@(post.PostId)"
                    class="btn
                                    @(hasUserVoted && (int)userVote.Type < 0 ? "btn-danger" : hasUserVoted ? "disabled btn-primary" : "btn-primary")
                                    @(!Request.IsAuthenticated ? "disabled" : "")">
                <span class="glyphicon glyphicon-arrow-down"></span>
            </button>
            <a href="/Posts/View/@(post.PostId)">
                <button class="btn
                                    @(post.AnyNewComments() ? "btn-success" : "btn-primary")
                                    @(!Request.IsAuthenticated ? "disabled" : "")">
                    <span class="glyphicon glyphicon-comment"></span>
                    <span style="font-weight:bold;">@(post.CountComments())</span>
                </button>
            </a>
            @if (User.IsInRole(RolesHelper.AdminRole))
            {
                <button class="btn btn-warning toggle-nsfw"
                        data-id="@(post.PostId)"
                        data-toggle="tooltip"
                        data-placement="bottom"
                        title="Toggle NSFW">
                    <span class="glyphicon glyphicon-warning-sign"></span>
                </button>
            }

            <span class="pull-right text-info">Posted at: <span>@post.DateCreated.ToString("d")</span></span>
        </div>
        <hr />
    </div>
}